interface NotebookCell {
  cell_type: 'code' | 'markdown'
  metadata?: Record<string, any>
  source: string[]
}

interface Notebook {
  cells: NotebookCell[]
  metadata: {
    kernelspec: {
      display_name: string
      language: string
      name: string
    }
    language_info: {
      name: string
      version: string
    }
  }
  nbformat: number
  nbformat_minor: number
}

export async function generateNotebook(
  hfModel: string,
  shareId?: string
): Promise<Notebook> {
  try {
    // Fetch model metadata
    const modelResponse = await fetch(`https://huggingface.co/api/models/${hfModel}`)
    let modelData = null

    if (modelResponse.ok) {
      modelData = await modelResponse.json()
    }

    // Fetch README
    let readmeContent = ''
    let codeSnippet = ''

    if (modelData?.sha) {
      const readmeResponse = await fetch(
        `https://huggingface.co/${hfModel}/raw/${modelData.sha}/README.md`
      )
      if (readmeResponse.ok) {
        readmeContent = await readmeResponse.text()

        // Extract first Python code block
        const pythonCodeMatch = readmeContent.match(/```python\n([\s\S]*?)\n```/)
        if (pythonCodeMatch) {
          codeSnippet = pythonCodeMatch[1].trim()
        } else {
          // Fallback to any code block
          const anyCodeMatch = readmeContent.match(/```\n([\s\S]*?)\n```/)
          if (anyCodeMatch) {
            codeSnippet = anyCodeMatch[1].trim()
          }
        }
      }
    }

    // Generate generic snippet if no code found
    if (!codeSnippet) {
      const pipelineTag = modelData?.pipeline_tag || 'text-generation'
      codeSnippet = generateGenericSnippet(hfModel, pipelineTag)
    }

    // Build notebook cells
    const cells: NotebookCell[] = [
      // Title cell
      {
        cell_type: 'markdown',
        source: [
          `# Alacard | ${hfModel} Quickstart\n\n`,
          `**Model:** [${hfModel}](https://huggingface.co/${hfModel})\n\n`,
          modelData?.license ? `**License:** ${modelData.license}\n\n` : '',
          `*Generated by Alacard Model Arena*\n`
        ].filter(Boolean)
      },

      // Environment setup
      {
        cell_type: 'code',
        metadata: {},
        source: [
          '# Install required packages\n',
          '!pip install transformers huggingface_hub requests --quiet\n',
          '\n',
          'import transformers\n',
          'from huggingface_hub import HfApi\n',
          'import requests\n',
          'import json\n',
          '\n',
          'print("✅ Environment setup complete")\n'
        ]
      },

      // Hello cell
      {
        cell_type: 'code',
        metadata: {},
        source: generateHelloCell(hfModel, modelData?.pipeline_tag)
      },

      // Sample from model card
      {
        cell_type: 'markdown',
        source: [
          '## Samples from Model Card\n\n',
          'The following code example is extracted from the model\'s README:\n'
        ]
      },

      {
        cell_type: 'code',
        metadata: {},
        source: [
          '# Code from model README\n',
          codeSnippet,
          '\n',
          'print("\\n✅ Sample code executed successfully")\n'
        ]
      }
    ]

    // Add recipe metadata if shareId provided
    if (shareId) {
      cells.push({
        cell_type: 'markdown',
        source: [
          '## Recipe Used\n\n',
          `This notebook was generated from an Alacard Arena comparison.\n`,
          `**Share ID:** [${shareId}](/share/${shareId})\n`,
          '\n',
          '*View the complete comparison results and remix this recipe.*\n'
        ]
      })
    }

    // Add next steps
    cells.push({
      cell_type: 'markdown',
      source: [
        '## Next Steps\n\n',
        '- Experiment with different prompts and parameters\n',
        '- Fine-tune the model for your specific use case\n',
        '- Share your results with the community\n',
        '- [Return to Alacard Arena](/arena) to compare more models\n'
      ]
    })

    // Build notebook structure
    const notebook: Notebook = {
      cells,
      metadata: {
        kernelspec: {
          display_name: 'Python 3',
          language: 'python',
          name: 'python3'
        },
        language_info: {
          name: 'python',
          version: '3.9.0'
        }
      },
      nbformat: 4,
      nbformat_minor: 4
    }

    return notebook

  } catch (error) {
    console.error('Notebook generation error:', error)

    // Return a basic fallback notebook
    return generateFallbackNotebook(hfModel, shareId)
  }
}

function generateGenericSnippet(modelId: string, pipelineTag: string): string {
  switch (pipelineTag) {
    case 'text-generation':
      return `from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("${modelId}")
model = AutoModelForCausalLM.from_pretrained("${modelId}")

prompt = "Hello, how are you?"
inputs = tokenizer(prompt, return_tensors="pt")
outputs = model.generate(**inputs, max_length=50)
response = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(response)`

    case 'text2text-generation':
      return `from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("${modelId}")
model = AutoModelForSeq2SeqLM.from_pretrained("${modelId}")

prompt = "Translate: Hello, how are you?"
inputs = tokenizer(prompt, return_tensors="pt")
outputs = model.generate(**inputs)
response = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(response)`

    default:
      return `from transformers import pipeline

# Create a pipeline for the model
pipe = pipeline("${pipelineTag}", model="${modelId}")

# Test the pipeline
result = pipe("Hello, how are you?")
print(result)`
  }
}

function generateHelloCell(modelId: string, pipelineTag?: string): string[] {
  if (pipelineTag === 'text-generation' || pipelineTag === 'text2text-generation') {
    return [
      '# Hello Cell - Verify Model Access\n',
      `from transformers import pipeline\n`,
      '\n',
      `try:\n`,
      `    pipe = pipeline("${pipelineTag || 'text-generation'}", model="${modelId}")\n`,
      `    result = pipe("Hello! This is a test.", max_length=20)\n`,
      `    print(f"✅ Model '{modelId}' is working!")\n`,
      `    print(f"Response: {result[0]['generated_text'] if isinstance(result, list) else result['generated_text']}")\n`,
      `except Exception as e:\n`,
      `    print(f"❌ Error accessing model: {e}")\n`,
      `    print("This might be due to authentication or model availability.")\n`
    ]
  }

  return [
    '# Hello Cell - Verify Model Access\n',
    'import requests\n',
    '\n',
    `try:\n`,
    `    # Test model access via Hugging Face API\n`,
    `    api = HfApi()\n`,
    `    model_info = api.model_info("${modelId}")\n`,
    `    print(f"✅ Model \\"${modelId}\\" is accessible!")\n`,
    `    print(f"Pipeline: {model_info.pipeline_tag or \\"unknown\\"}")\n`,
    `    print(f"Downloads: {model_info.downloads:,}")\n`,
    `except Exception as e:\n`,
    `    print(f"❌ Error accessing model: {e}")\n`
  ]
}

function generateFallbackNotebook(modelId: string, shareId?: string): Notebook {
  const cells: NotebookCell[] = [
    {
      cell_type: 'markdown',
      source: [
        `# Alacard | ${modelId} Quickstart\n\n`,
        `**Model:** ${modelId}\n\n`,
        `*Generated by Alacard Model Arena (fallback mode)*\n`
      ]
    },
    {
      cell_type: 'code',
      metadata: {},
      source: [
        '# Install required packages\n',
        '!pip install transformers huggingface_hub --quiet\n',
        '\n',
        'print("✅ Environment setup complete")\n'
      ]
    },
    {
      cell_type: 'code',
      metadata: {},
      source: [
        '# Basic model loading example\n',
        'from transformers import pipeline\n',
        '\n',
        `# Note: You may need to authenticate or use a different model\n`,
        `print("Visit https://huggingface.co/${modelId} for usage instructions")\n`,
        'print("✅ Notebook generated successfully")\n'
      ]
    }
  ]

  if (shareId) {
    cells.push({
      cell_type: 'markdown',
      source: [
        '## Recipe Used\n\n',
        `**Share ID:** ${shareId}\n`,
        '*Generated from Alacard Arena comparison*\n'
      ]
    })
  }

  return {
    cells,
    metadata: {
      kernelspec: {
        display_name: 'Python 3',
        language: 'python',
        name: 'python3'
      },
      language_info: {
        name: 'python',
        version: '3.9.0'
      }
    },
    nbformat: 4,
    nbformat_minor: 4
  }
}