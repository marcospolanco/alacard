```mermaid
graph TD
    subgraph "User Layer"
        WebApp[React/Next.js SPA<br/>/arena, /share]
    end

    subgraph "Backend Layer"
        APIRoutes[Node.js API Routes<br/>/api/match, /api/notebook]
    end

    subgraph "Data Store"
        Supabase[Supabase PostgreSQL<br/>Single 'matches' table]
    end

    subgraph "External AI Services"
        OpenAI[OpenAI API<br/>gpt-4o, gpt-4o-mini]
        HF[Hugging Face APIs<br/>Inference & Model Metadata]
    end

    %% --- Connections ---

    %% Match Creation & Scoring Flow
    WebApp -- "1. POST /api/match\n(models, prompts)" --> APIRoutes
    APIRoutes -- "2. Call AI APIs in parallel" --> OpenAI
    APIRoutes -- "2. Call AI APIs in parallel" --> HF
    OpenAI -- "3. Return model output" --> APIRoutes
    HF -- "3. Return model output" --> APIRoutes
    APIRoutes -- "4. Store results & recipe" --> Supabase
    Supabase -- "5. Return share_id" --> APIRoutes
    APIRoutes -- "6. Return outputs & share_id" --> WebApp
    WebApp -- "7. POST /api/match/:id/score\n(Store winner)" --> APIRoutes
    APIRoutes -- "8. Update match record" --> Supabase


    %% Share & Remix Flow
    WebApp -- "GET /share/[share_id]" --> APIRoutes
    APIRoutes -- "Fetch match by share_id" --> Supabase
    Supabase -- "Return match data" --> APIRoutes
    APIRoutes -- "Return full recipe & results" --> WebApp

    %% Notebook Generation Flow
    WebApp -- "GET /api/notebook?hf_model=..." --> APIRoutes
    APIRoutes -- "Fetch README & metadata" --> HF
    HF -- "Return model info" --> APIRoutes
    APIRoutes -- "Generate .ipynb from template" --> WebApp


    %% Style Definitions
    classDef userLayer fill:#e1f5fe,stroke:#222
    classDef appLayer fill:#f3e5f5,stroke:#222
    classDef dataLayer fill:#fffde7,stroke:#222
    classDef externalLayer fill:#e8f5e9,stroke:#222

    class WebApp userLayer
    class APIRoutes appLayer
    class Supabase dataLayer
    class OpenAI,HF externalLayer
```

### Architecture Components Explained

**User Layer (React/Next.js)**
- A single-page application containing the Model Comparison Arena and the public Share pages.

**Backend Layer (Node.js API Routes)**
- Server-side logic co-located with the frontend.
- Handles all business logic, including calling external AI services, querying the database, and generating notebooks from templates.

**Data Store (Supabase)**
- A single PostgreSQL table (`matches`) used to store all data related to a comparison, including the inputs (recipe), outputs, and final score. This simplifies the data model for the sprint.

**External AI Services**
- **OpenAI API**: Used to get responses from proprietary models like `gpt-4o-mini`.
- **Hugging Face APIs**: Used for two purposes: running open-source models via the Inference API and fetching model metadata/READMEs via the Model API for notebook generation.

### Data Flow
1.  The user selects models and prompts in the **WebApp** and sends them to the **API Routes**.
2.  The backend calls the **OpenAI** and **Hugging Face** APIs in parallel to get model outputs.
3.  The results are stored in the **Supabase** `matches` table, and a unique `share_id` is returned.
4.  The user can share a link, which allows others to view the results by fetching the data from Supabase.
5.  For notebook generation, the backend fetches metadata from the **Hugging Face** Model API and uses a template to create and return a downloadable `.ipynb` file.
